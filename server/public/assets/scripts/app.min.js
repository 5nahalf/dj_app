/*! walking_skeleton 2015-05-26*/
var app=angular.module("app",[]);app.controller("IndexController",["$scope","$http",function(a,b){a.cat={},a.cats=[];var c=function(){return b.get("/cats").then(function(b){if(200!==b.status)throw new Error("failed to fetch cats from the api");return a.cat={},a.cats=b.data,b.data})};a.add=function(a){return b.post("/add",a).then(c)},a.remove=function(a){return b.post("/remove",a).then(c)},c()}]),app.controller("DataController",["$scope","$http",function(a,b){a.music={},a.musics=[];var c=function(){return b.get("/musicdata").then(function(b){if(200!==b.status)throw new Error("failed to fetch muisc from the api");return a.music={},a.musics=b.data,b.data})};a.add=function(a){return b.post("/madd",a).then(c)},a.remove=function(a){return b.post("/mremove",a).then(c)},c()}]);var expectFriendNames=function(a,b){element.all(by.repeater(b+" in musics").column(b+".name")).then(function(b){b.forEach(function(b,c){expect(b.getText()).toMatch(a[c])})})};it("should search across all fields when filtering with a string",function(){var a=element(by.model("searchText"));a.clear(),a.sendKeys("m"),expectFriendNames([],"friend"),a.clear(),a.sendKeys("76"),expectFriendNames([],"friend")}),it("should search in specific fields when filtering with a predicate object",function(){var a=element(by.model("search.$"));a.clear(),a.sendKeys("i"),expectFriendNames([],"friendObj")}),it("should use a equal comparison when comparator is true",function(){var a=element(by.model("search.name")),b=element(by.model("strict"));a.clear(),a.sendKeys(),b.click(),expectFriendNames([],"friendObj")});